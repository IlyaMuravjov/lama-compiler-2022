-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import Binop;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, s, w], insns) {
  case insns of
      insn : insns ->
        case insn of
            READ ->
              case readWorld (w) of
                [z, w] -> eval (env, [z:stack, s, w], insns)
              esac
          | WRITE ->
            case stack of
              z : stack -> eval (env, [stack, s, writeWorld (z, w)], insns)
            esac
          | BINOP (op) ->
            case stack of
              y : x : stack -> eval (env, [evalBinop (op) (x, y):stack, s, w], insns)
            esac
          | LD    (x) -> eval (env, [s (x):stack, s, w], insns)
          | ST    (x) ->
            case stack of
              z : stack -> eval (env, [stack, s <- [x, z], w], insns)
            esac
          | CONST (n) -> eval (env, [n:stack, s, w], insns)
          | LABEL (_) -> eval (env, c, insns)
          | JMP (l) -> eval (env, c, env.fromLabel (l))
          | CJMP (cond, l) ->
            case stack of
              x : stack -> eval (env, [stack, s, w], if (case cond of "nz" -> x | "z" -> x == false esac) then env.fromLabel (l) else insns fi)
            esac
        esac
    | { } -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a Buffer of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var(x)                    -> singletonBuffer(LD(x))
    | Const(n)                -> singletonBuffer(CONST(n))
    | Binop(op, expr1, expr2) -> compileExpr(expr1) <+> compileExpr(expr2) <+ BINOP(op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a Buffer of stack machine
-- instructions.
public fun compileSMToBuffer(stmt) {
  case stmt of
      Assn(x, expr)     -> compileExpr(expr) <+ ST(x)
    | Seq(stmt1, stmt2) -> compileSMToBuffer(stmt1) <+> compileSMToBuffer(stmt2)
    | Skip              -> emptyBuffer()
    | Read(x)           -> listBuffer({ READ, ST(x) })
    | Write(expr)       -> compileExpr(expr) <+ WRITE
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile (lab, env, stmt) {
    case stmt of
        Skip -> [false, env, emptyBuffer ()]
      | Read  (x) -> [false, env, singletonBuffer (READ) <+ ST (x)]
      | Write (e) -> [false, env, compileExpr (e) <+ WRITE]
      | Assn  (x, e) -> [false, env, compileExpr (e) <+ ST (x)]
      | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile (s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                esac
            esac
        esac
      | While (cond, body) ->
        case env.genLabels (2) of
          [bodyLab, condLab, env] ->
            case compile (condLab, env, body) of
              [_, env, bodyCode] ->
                [false, env, listBuffer ({ JMP (condLab), LABEL (bodyLab) }) <+> bodyCode <+ LABEL (condLab) <+> compileExpr (cond) <+ CJMP ("nz", bodyLab)]
            esac
        esac
      | DoWhile (body, cond) ->
        case env.genLabels (2) of
          [bodyLab, condLab, env] ->
            case compile (condLab, env, body) of
              [condLabUsed, env, bodyCode] ->
                [false, env, singletonBuffer (LABEL (bodyLab)) <+> bodyCode <+> label (condLab, condLabUsed) <+> compileExpr (cond) <+ CJMP ("nz", bodyLab)]
            esac
        esac
      | If (cond, stmt1, stmt2) ->
        case env.genLabel of
          [elseLab, env] -> case compile (lab, env, stmt1) of
            [labUsed1, env, thenCode] -> case compile (lab, env, stmt2) of
              [labUsed2, env, elseCode] ->
                var elseIsNotEmpty = case getBuffer (elseCode) of { } -> false | _ -> true esac;
                [
                  labUsed1 !! labUsed2 !! elseIsNotEmpty,
                  env,
                  compileExpr (cond) <+ CJMP ("z", elseLab) <+> thenCode <+> if elseIsNotEmpty then singletonBuffer (JMP (lab)) else emptyBuffer () fi <+ LABEL (elseLab) <+> elseCode
                ]
            esac
          esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
